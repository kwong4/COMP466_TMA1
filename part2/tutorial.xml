<?xml version = "1.0"?>

<tutorial>
	<units>
		<unit>
			<title>Unit 1: Web, HTML5, and CSS</title>
			<section>
				<sectiontitle>What is HTML5?</sectiontitle>
				<description>HTML5 is a markup language that specififes the structure and content of documents that are displayed in web browsers. It is often coded in basic text-editors. HTML5 have 2 main components within its inital html element called head and body. In HTML5 documents, elements are delimited with a start and end tag. For example &#60;html&#62;&#60;&#47;html&#62; defines an html tag. The element is defined by its name (html) within less than and greater than signs. The end delimiter can be noted with a slash in front of the ending element (but still within the signs). Between the start and end tags, you are able to put content. Depending on the element tag, HTML interprets with it differently.
				</description>
			</section>
			<section>
				<sectiontitle>Basic Elements of HTML</sectiontitle>
				<description>There are many different kinds of elements in html. We will be only going through some of them as there are too many to cover. First off there is the Paragraph Element denoted as &#60;p&#62;&#60;&#47;p&#62;. This element, like many elements in HTML5 are often predictable in purpose from its name. The Paragraph element forms a paragraph which places extra space above and below it. 
				</description>
				<description>The next element is the anchor element denoted as &#60;a href=""&#62;&#60;&#47;a&#62;. This element defines a hyperlink, and uses an attribute called href defined in its start tag as the destination of the hyperlink. The text inbetween the start and end tags are the visible content that is clickable to the user.
				</description>
				<description>The next element is the image element denoted as &#60;img src=""&#62;&#60;. This element defines a image and uses an attributed (like the anchor element) called src to denote the source of the image. However this element does not need an end tag like the others because it simply does not have a need for it as it pulls its content from the attributes. Another attribute to note of this element is the alt attribute which defines an alternate image if the source (src) is unable to be loaded.
				</description>
			</section>
			<section>
				<sectiontitle>Lists and Tables</sectiontitle>
				<description>There are two main types of lists in HTML5. There are ordered lists denoted as &#60;ol&#62;&#60;&#47;ol&#62; and there are unordered lists denoted as &#60;ul&#62;&#60;&#47;ul&#62;. The difference is that ordered lists will represent an increasing or decreasing manner of each marked list item. However, unordered lists just represent their list items as undefined points (ex. bullets or dashes). In either case the content of each list requires another element called list item denoted as &#60;li&#62;&#60;&#47;li&#62;. List items define the points for each list, and their content define what text each point will respresent.
				</description>
				<description>Tables are one of the original ways to represent data. In HTML5, a table is denoted as &#60;table&#62;&#60;&#47;table&#62; and has 3 distinct sections called head, body, and foot. The head section denoted as &#60;thead&#62;&#60;&#47;thead&#62; defines header column information. The body section denoted as &#60;tbody&#62;&#60;&#47;tbody&#62; defines the primary data of the table. Finally the foot section denoted as &#60;tfoot&#62;&#60;&#47;tfoot&#62; defines the footer of the table.
				</description>
				<description>Each of the main 3 sections use &#60;tr&#62;&#60;&#47;tr&#62; to define a row, which must be between the start and end tags of each section. Furthermore, for each row columns can be define in a similar fashion (between tags). However, the thead and the tfoot both use &#60;th&#62;&#60;&#47;th&#62; to define columns (called header columns) while the tbody uses &#60;td&#62;&#60;&#47;td&#62; to define column data.
				</description>
			</section>
			<section>
				<sectiontitle>Attributes, Styles, and CSS</sectiontitle>
				<description>As we briefly mentioned earlier, elements in HTML5 can carry attributes in their elements. Attributes are very useful in defining how HTML5 handles presents and manages certain elements. One important attribute is the style attribute, which further more defines style-attributes. Elements that have a common purpose (such as displaying text) will have common style-attributes such as font-weight, font-family, and font-size. Other elements that do not display text will not have these style-attributes, so it's worth while for you to lookup if a element has an specific attribute if you are unsure.
				</description>
				<description>Now the act of defining style elements within the start tag as an attribute is defined as an inline style. This is often not a common practice unless the application is small or is used for practice. The reason is because by defining each element individually, you cause a dependency on the element itself. This makes making changes, maintenance, and designing a huge burden for future uses. An alternative for this is the popular CSS (Cascading Style Sheet). This lets you define what styles different elements and classes have. There are two different ways to include a CSS with a HTML5 document. The first is called embedded style sheets in which you embed a CSS document in the HTML5 document's head section. The second is called a external style sheet which define a CSS document in a seperate file (with the extension .css) and is linked to the initial HTML5 document.
				</description>
				<description>We will first look at the guts (main content) of a CSS document. In a CSS document, you are able to define elements such as body {font-family: arial, helvetica, sans-serif;} which define the body element of the HTML5 document to have a font-family of arial. If arial if unavailable, it will cascade down the order until one is available. This makes putting a common font-family at the end important. In CSS documents, you can define element classes such as p.important {font-weight: bold}, which only applies to p elements that have the class attribute important. In embedded style sheets, the definition of a CSS document is enclosed in the &#60;style type = "text/css"&#62;&#60;&#47;style&#62; tags within the head element of an HTML5 document. Whereas a external style sheet is defined with just the guts in the external file, but is linked with the use of &#60;link rel = "stylesheet" type = "text&#47;css" href= "styles.css"&#62; in the head of an HTML5 document where the href is the location of the CSS file.
				</description>
			</section>
		</unit>
		<unit>
			<title>Unit 2: Client side Scripting in JavaScript</title>
			<section>
				<sectiontitle>What is JavaScript?</sectiontitle>
				<description>JavaScript is a cross-platform object-oriented scripting language that is used to enhance the functionality and appearance of web pages. Similar to CSS documents, you are able to embed them into the HTML5 document itself or as an external file. To embed a document into a HTML5 document, you define it as &#60;script type = "text&#47;javascript" &#62;&#60;&#47;script&#62; within the head of the HTML5 document. Otherwise you are able to define an external JavaScript file as &#60;script src = "test.js" &#62;&#60;&#47;script&#62; within the head of the HTML5 document. JavaScript is extremely important and useful to add a dynamic component to your web applications. One important thing to note that JavaScript referred to as a loosely typed language, which means that JavaScript does not have specific type definitions.
				</description>
			</section>
			<section>
				<sectiontitle>Comments, document and window object</sectiontitle>
				<description>As we have mentioned, JavaScript is an object-oriented language. Two important global objects available to us in JavaScript is the document and the window object. The document object represents the HTML5 document that the browser is currently displaying. This is very useful to you because the document object has important writing methods. These methods are write and writeln - if you have had any experience with other object-orientated languages, this may be familar to you. If not, these functions both accept a string argument and writes it to the HTML5 document. However, the difference between write and writeln is that writeln puts a new line at the end of your string when it writes it to the HTML5 document. With the use of this, you are able to even write html code such as document.writeln("&#60;h1&#62;Welcome to JavaScript Programming!&#60;&#47;h1&#62;");
				</description>
				<description>The window object represents an open window in a browser. The windows object is important for displaying and retrieving information from the user. This can be done with the alert and prompt method respectively. The alert method accepts a string and displays it to the user in a dialog box that pops up. This dialog box requires the user to note that it has recieved the alert with a mouse click on the "OK" button or by hitting Enter when the button is focused. The prompt method, similar to the alert method also accepts a string which is displayed to the user in a dialog box. However this time the dialog box has an input textfield with an "OK" and "Cancel" button. The return value of this method is a string.
				</description>
				<description>JavaScript defines a single lined comment with a preceding &#47;&#47;. Comments are important to define what certain portions of code are doing, as well as possibly type reminders since JavaScript is a loosely typed language. Multiline comments are defined as a preceding &#47;* start tag, and a post end tag of *&#47;. Multiline comments are useful for descriptions and isolating code for testing and design purposes.
				</description>
			</section>
			<section>
				<sectiontitle>Document Object Model</sectiontitle>
				<description>The Document Object Model or commonly referred to as DOM is the object hierarchy which gives you scripting access to all elements on a web page. This is extremely useful in dynamically creating, modifying, and removing elements in a page. How you can think of DOM is essentially a tree-structure. In an HTML document, you are able to nest elements within other elements. For example when you create a body element you define other elements such as h1 or p within it. These elements can be referred to as a child node of the body element. Similarly a parent node is the node that contains the current node. For example the parent node of an h1 element contained within an body element is the body node. The root node (or the html node) is the top of the tree and is referred to as the root node because it does not have any parents.
				</description>
				<description>So now that we have a general outline of the structure, how do we go about modifying these elements with JavaScript? Each element in an HTML5 page has an attribute referred to as id. Each id attribute must be unique and is often define in an incrementing order. With these ids, you are able to find the node within JavaScript from these node ids. To obtain a node object in JavaScript you are able to use the statement var currentNode = document.getElementById(id); where the id is the id defined in the HTML5 document. After obtaining the node in javaScript you have access to its methods and attributes. For example, by calling the .value attribute of this node, you are able to obtain the content of the element. Similarly there are many different functions such as setAttribute and getAttribute which you can use to modify or obtain specific information about a certain node.
				</description>
				<description>Now the important step of knowing the hierarchy comes into play. Nodes have functions such as createNewNode which you are able to create new node objects. But how do we insert them into the HTML5 document? To do this you can use different insert methods available to the nodes such as insertBefore or appendChild. The insertBefore method takes in two node objects. The first argument is the node to insert, while the second argument is the child node in which to insert before. The appendChild function only takes in one argument (node) and just appends it as a child of the calling node. There are many other attributes and functions such as the parentNode attribute which returns the parent of the calling node which are important in the Document Object Model.
				</description>
			</section>
		</unit>
	</units>
</tutorial>